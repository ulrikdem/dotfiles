#!/bin/bash

fzf_args=(
    --ansi
    --tabstop 3
    --tiebreak index
    --bind "tab:execute-silent(cut -f 2 <<<{} | head -c -1 >>'$1')+refresh-preview"
    --bind "ctrl-c:execute-silent(printf '' >'$1')+refresh-preview"
    --preview "cat -- '$1'"
    --preview-window down,1,noborder
)

char=$(
    set -o pipefail
    python3 - <(xkbcomp "$DISPLAY" -) <(if [[ -f ~/.local/share/nerd-fonts/i_all.sh ]]; then
        source ~/.local/share/nerd-fonts/i_all.sh
        for name in "${!i_@}"; do
            echo "$name ${!name}"
        done
    fi) <<'PYTHON' | fzf "${fzf_args[@]}" | cut -f 2

import re
import sys
from pathlib import Path

def output(code, char, name, seqs=''):
    print(f'\x1b[90m{code}\x1b[0m\t{char}\t{name} \x1b[90m{seqs}\x1b[0m ')

keysyms = {}
altgr = {}
with open(sys.argv[1]) as file:
    pattern = r'\bkey\s*<.*?>\s*\{\s*\[(.*?)\]\s*\}|\bsymbols\s*\[.*?\]\s*=\s*\[(.*?)\]'
    for match in re.finditer(pattern, file.read()):
        keys = [key.strip() for key in (match[1] or match[2]).split(',')]
        for i, key in enumerate(keys):
            if re.fullmatch(r'U[0-9A-F]{4,6}', key):
                keysyms[key] = chr(int(key[1:], 16))
            elif not key.startswith('KP_'):
                keysyms[key] = f'<{key}>'
            if 2 <= i < 4 and key != keys[i - 2] and keys[i - 2] in keysyms:
                altgr[key] = keys[i - 2]

with open('/usr/include/X11/keysymdef.h') as file:
    pattern = r'^#define XK_(\w+)\s+0x[0-9a-f]+\s*/\*[ (]U\+([0-9A-F]{4,6}) .*[ )]\*/\s*$'
    for match in re.finditer(pattern, file.read(), re.MULTILINE):
        key, code = match.groups()
        if key in keysyms or f'U{code}' in keysyms:
            char = chr(int(code, 16))
            keysyms[key] = char
            keysyms[f'U{code}'] = char
        if key in altgr:
            altgr[f'U{code}'] = altgr[key]
keysyms['space'] = '␣'

compose = {}
for path in ['/usr/share/X11/locale/en_US.UTF-8/Compose', Path.home() / '.XCompose']:
    try:
        with open(path) as file:
            pattern = r'^\s*<Multi_key>((?:\s*<\w+>)+)\s*:\s*"([^\\]|\\.)"'
            for match in re.finditer(pattern, file.read(), re.MULTILINE):
                seq, char = match.groups()
                seq = [key.strip('<>') for key in seq.split()]
                if all(key in keysyms for key in seq):
                    seq = ''.join(keysyms[key] for key in seq)
                    compose.setdefault(char[-1], []).append(seq)
    except FileNotFoundError:
        pass

with open('/usr/share/unicode/UnicodeData.txt') as file:
    for line in file:
        code, name = line.split(';')[:2]
        if name.startswith('<'):
            continue
        char = chr(int(code, 16))
        seqs = compose.get(char, [])
        if f'U{code}' in altgr:
            seqs.insert(0, 'altgr+' + keysyms[altgr[f'U{code}']])
        output(code, char, name.lower(), ' '.join(seqs))

nerd = []
with open(sys.argv[2]) as file:
    for line in file:
        name, char = line[2:].split()
        nerd.append((char, name))
for char, name in sorted(nerd):
    code = hex(ord(char))[2:].upper()
    name = 'nerd fonts ' + name.replace('_', ' ')
    output(code, char, name)

PYTHON
)

if (($?)); then
    printf '' >"$1"
elif (($(wc -c <"$1") == 0)); then
    printf %s "$char" >"$1"
fi
