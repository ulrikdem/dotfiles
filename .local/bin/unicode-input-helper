#!/bin/bash

printf '\e]2;unicode\a'

fzf_args=(
    --ansi
    --tabstop 3
    --tiebreak index
    --bind "tab:execute-silent(printf %s {2} >>${1@Q})+refresh-preview"
    --bind "ctrl-c:execute-silent(printf '' >${1@Q})+refresh-preview"
    --preview "cat -- ${1@Q}"
    --preview-window up,1,noborder
    --reverse
)

char=$(
    set -o pipefail
    python3 - <(xkbcomp "$DISPLAY" -) <(if [[ -f ~/.local/share/nerd-fonts/i_all.sh ]]; then
        source ~/.local/share/nerd-fonts/i_all.sh
        for name in "${!i_@}"; do
            echo "$name ${!name}"
        done
    fi) <<'PYTHON' | fzf "${fzf_args[@]}" | cut -f 2

import re
import sys
from pathlib import Path

def output(code, char, name, seqs=''):
    print(f'\x1b[90m{code}\x1b[0m\t{char}\t{name} \x1b[90m{seqs}\x1b[0m ')

keysyms = {}
with open('/usr/include/X11/keysymdef.h') as file:
    pattern = r'^#define XK_(\w+)\s+0x[0-9a-f]+\s*/\*[ (]U\+([0-9A-F]{4,6}) .*[ )]\*/\s*$'
    for match in re.finditer(pattern, file.read(), re.MULTILINE):
        key, code = match.groups()
        keysyms[key] = int(code, 16)
keysyms['space'] = 'space'
keysyms['Multi_key'] = 'compose'

def normalize(key):
    return int(key[1:], 16) if re.fullmatch(r'U[0-9A-F]{4,6}', key) else keysyms.get(key, key)

keymap = {}
altgr = {}
with open(sys.argv[1]) as file:
    pattern = r'\bkey\s*<.*?>\s*\{\s*\[(.*?)\]\s*\}|\bsymbols\s*\[.*?\]\s*=\s*\[(.*?)\]'
    for match in re.finditer(pattern, file.read()):
        keys = [normalize(key.strip()) for key in (match[1] or match[2]).split(',')]
        for i, key in enumerate(keys):
            if isinstance(key, str) and key.startswith('KP_'):
                continue
            if i < 2:
                keymap[key] = chr(key) if isinstance(key, int) else f'<{key}>'
            elif i < 4:
                base = keys[i - 2]
                altgr[key] = f'<altgr-{chr(base) if isinstance(base, int) else base}>'

compose = {}
shadowed = set()
for path in [Path.home() / '.XCompose', '/usr/share/X11/locale/en_US.UTF-8/Compose']:
    try:
        with open(path) as file:
            pattern = r'^((?:\s*<\w+>)+)\s*:\s*"([^\\]|\\.)"'
            for match in re.finditer(pattern, file.read(), re.MULTILINE):
                seq, char = match.groups()
                seq = [normalize(key.strip('<>')) for key in seq.split()]
                if all(key in keymap or key in altgr for key in seq):
                    if len(seq) == 1:
                        shadowed.add(seq[0])
                    seq = ''.join(keymap.get(key) or altgr.get(key) for key in seq)
                    compose.setdefault(ord(char[-1]), []).append(seq)
    except FileNotFoundError:
        pass

with open('/usr/share/unicode/UnicodeData.txt') as file:
    for line in file:
        code, name = line.split(';')[:2]
        if name.startswith('<'):
            continue
        key = int(code, 16)
        seqs = compose.get(key, [])
        if key in altgr and key not in shadowed:
            seqs.insert(0, altgr[key])
        output(code, chr(key), name.lower(), ' '.join(seqs))

nerd = []
with open(sys.argv[2]) as file:
    for line in file:
        name, char = line[2:].split()
        nerd.append((char, name))
for char, name in sorted(nerd):
    code = hex(ord(char))[2:].upper()
    name = 'nerd fonts ' + name.replace('_', ' ')
    output(code, char, name)

PYTHON
)

if (($?)); then
    printf '' >"$1"
elif (($(wc -c <"$1") == 0)); then
    printf %s "$char" >"$1"
fi
