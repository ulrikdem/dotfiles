#!/usr/bin/env python3

from collections import defaultdict
from datetime import date, datetime, time, timedelta
from time import sleep
import os
import os.path
import sys

path = os.path.expanduser("~/.work/current")

def compute_totals():
    totals = defaultdict(lambda: [timedelta(), timedelta(), timedelta()])
    active = False
    for line_num, line in enumerate(open(path)):
        if active:
            return None, False, f"line {line_num}: Missing stop time"
        try:
            if "!" in line:
                week, hours = line.strip().split("!")
                week = datetime.fromisoformat(week)
                week = date.fromisocalendar(*week.isocalendar()[:2], day=7)
                totals[week][2] += timedelta(hours=float(hours))
            else:
                active = "/" not in line
                if active:
                    start = datetime.fromisoformat(line.strip())
                    stop = datetime.now()
                else:
                    start, stop = line.strip().split("/")
                    start = datetime.fromisoformat(start)
                    try:
                        stop = datetime.combine(start, time.fromisoformat(stop))
                    except ValueError:
                        stop = datetime.fromisoformat(stop)
                delta = stop - start
                totals[start.date()][0] += delta
                totals[date.fromisocalendar(*start.isocalendar()[:2], day=7)][1] += delta
        except ValueError as error:
            return None, False, f"line {line_num + 1}: {error}"
    return totals, active, None

def format_time(time: timedelta):
    minutes = time // timedelta(minutes=1)
    return f"{minutes // 60}:{minutes % 60:02}"

def report():
    totals, _, error = compute_totals()
    if not totals:
        sys.exit(f"error: {error}")
    line = "---------------------------"
    print(line)
    overtime = timedelta()
    for d, [daily, weekly, target] in sorted(totals.items()):
        if daily:
            print(f"{d}\t{format_time(daily):>5}")
        if weekly or target:
            print(f"{d:%G-W%V}\t{format_time(weekly):>5}/{format_time(target)}\n{line}")
            overtime += weekly - target
    sign, overtime = ("+", overtime) if overtime >= timedelta() else ("-", -overtime)
    print(f"{sign + format_time(overtime):>21}")

def append_open():
    line = b""
    try:
        file = open(path, "r+b")
        for line in file:
            pass
    except FileNotFoundError:
        os.makedirs(os.path.dirname(path), exist_ok=True)
        file = open(path, "ab")
    incomplete = line != b"" and b"/" not in line and b"!" not in line
    return file, line, incomplete

def toggle():
    file, line, incomplete = append_open()
    if not incomplete:
        file.write(f"{datetime.now().isoformat(timespec='minutes')}\n".encode())
    else:
        start = datetime.fromisoformat(line.strip().decode())
        stop = datetime.now()
        if start.date() == stop.date():
            stop = stop.time()
        file.seek(len(line.rstrip()) - len(line), os.SEEK_END)
        file.write(f"/{stop.isoformat(timespec='minutes')}\n".encode())

def target(hours: float):
    file, line, incomplete = append_open()
    if incomplete:
        file.seek(-len(line), os.SEEK_END)
    file.write(f"{date.today():%G-W%V}!{hours:g}\n".encode())
    if incomplete:
        file.write(line)

def undo():
    file, line, _ = append_open()
    file.truncate(file.tell() - len(line) + max(line.find(b"/"), 0))

def edit():
    os.execlp("nvim", "nvim", "+", path)

def bar():
    print(flush=True)
    try:
        from inotify_simple import INotify, flags
        inotify = INotify()
        inotify.add_watch(os.path.dirname(path), flags.CREATE | flags.CLOSE_WRITE | flags.MOVED_TO | flags.MOVED_FROM | flags.DELETE)
    except (ModuleNotFoundError, FileNotFoundError):
        sleep(1e9)
        return
    basename = os.path.basename(path)
    total = timedelta()
    while True:
        try:
            totals, active, error = compute_totals()
        except FileNotFoundError:
            totals, active, error = None, False, None
        last_update = datetime.now()
        if totals and active:
            total = sorted(filter(lambda x: x[1][0], totals.items()))[-1][1][0]
        while True:
            now = datetime.now()
            if active or error:
                prefix, suffix = ("<fc=red3>", "</fc>") if error else ("", " " + format_time(total + (now - last_update)))
                print(f" {prefix}<fn=1>󱃐</fn>{suffix} <fc=gray17>│</fc>", flush=True)
            else:
                print(flush=True)
            events = inotify.read(timeout=60_000 - now.second * 1000 - now.microsecond // 1000 if active else None, read_delay=100)
            if any(e.name == basename for e in events):
                break

match sys.argv[1:]:
    case []:
        report()
    case ["toggle"]:
        toggle()
    case ["target", hours]:
        target(float(hours))
    case ["undo"]:
        undo()
    case ["edit"]:
        edit()
    case ["bar"]:
        bar()
    case _:
        sys.exit(f"usage: {os.path.basename(sys.argv[0])} [toggle|target <hours>|undo|edit|bar]")
